/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

heatSource
{
    type            scalarCodedSource;
    selectionMode   all;

    fields          (T);
    name            sourceTime;

    codeInclude
    #{
    #};

    codeCorrect
    #{
    #};

    codeAddSup
    #{
        // max. avg temperature allowed
        const scalar Tmax   = 273.15 + 800.0;
        const scalar Tramp1 = 273.15 + 100.0;
        const scalar Tramp2 = 273.15 + 1200.0;

        const scalar heatPowerSource = 3000.0;          // W
        const scalar heatPowerRefVolume = 60558.45e-9;  // mÂ³
        const scalar heaterCount = 1.0;
        const scalar heatSourceValue = heatPowerSource / (heatPowerRefVolume * heaterCount);

        // calc. mean vol temperature
        const volScalarField& Tm = mesh_.lookupObject<volScalarField>("T");
        const scalar Tvol = Tm.weightedAverage(mesh_.V()).value();

        // Only apply when ...
        if (Tvol < Tmax)
        {
            // ramping the source term down
            const scalar t = (Tvol - Tramp1) / (Tramp2 - Tramp1);
            const scalar heatSourceRamped =
                (Tvol <= Tramp1) ? heatSourceValue :
                (Tvol >= Tramp2) ? 0.0 : t * heatSourceValue;

            //
            scalarField& source = eqn.source();
            source += heatSourceRamped;// * mesh_.V();
        }
    #};

    codeConstrain
    #{
    #};
}

// ************************************************************************* //
